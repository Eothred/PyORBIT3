# ------------------------------------------------------
# This is an example of Bessel function J(n,x) and I(n,x)
# -------------------------------------------------------

import sys
import math
import pytest
import orbit.core


from orbit_utils import num_recipes

x = 1.0

print("bessi(0,", x, ")=", num_recipes.bessi(0, x))
print("bessi(1,", x, ")=", num_recipes.bessi(1, x))
print("bessi0(", x, ")=", num_recipes.bessi0(x))
print("bessi1(", x, ")=", num_recipes.bessi1(x))
print("============================")
print("bessj(0,", x, ")=", num_recipes.bessj(0, x))
print("bessj(1,", x, ")=", num_recipes.bessj(1, x))
print("bessj0(", x, ")=", num_recipes.bessj0(x))
print("bessj1(", x, ")=", num_recipes.bessj1(x))
print("============================")
step = 0.1
x_start = 0.0
n_steps = 30
print("x  num_recipes.bessj0 num_recipes.bessj1 num_recipes.bessj2   num_recipes.bessi0 num_recipes.bessi1 num_recipes.bessi2  ")
st = " "
for i in range(n_steps):
    x = x_start + step * i
    res = (
        x,
        num_recipes.bessj(0, x),
        num_recipes.bessj(1, x),
        num_recipes.bessj(2, x),
        num_recipes.bessi(0, x),
        num_recipes.bessi(1, x),
        num_recipes.bessi(2, x),
    )
    st += "%.1f %.4f %.4f %.4f %.4f %.4f %.4f" % res + "\n"
print(st)


def test_num_recipes():
    expected = """ 0.0 1.0000 0.0000 0.0000 1.0000 0.0000 0.0000
0.1 0.9975 0.0499 0.0012 1.0025 0.0501 0.0013
0.2 0.9900 0.0995 0.0050 1.0100 0.1005 0.0050
0.3 0.9776 0.1483 0.0112 1.0226 0.1517 0.0113
0.4 0.9604 0.1960 0.0197 1.0404 0.2040 0.0203
0.5 0.9385 0.2423 0.0306 1.0635 0.2579 0.0319
0.6 0.9120 0.2867 0.0437 1.0920 0.3137 0.0464
0.7 0.8812 0.3290 0.0588 1.1263 0.3719 0.0638
0.8 0.8463 0.3688 0.0758 1.1665 0.4329 0.0844
0.9 0.8075 0.4059 0.0946 1.2130 0.4971 0.1083
1.0 0.7652 0.4401 0.1149 1.2661 0.5652 0.1357
1.1 0.7196 0.4709 0.1366 1.3262 0.6375 0.1671
1.2 0.6711 0.4983 0.1593 1.3937 0.7147 0.2026
1.3 0.6201 0.5220 0.1830 1.4693 0.7973 0.2426
1.4 0.5669 0.5419 0.2074 1.5534 0.8861 0.2875
1.5 0.5118 0.5579 0.2321 1.6467 0.9817 0.3378
1.6 0.4554 0.5699 0.2570 1.7500 1.0848 0.3940
1.7 0.3980 0.5778 0.2817 1.8640 1.1963 0.4565
1.8 0.3400 0.5815 0.3061 1.9896 1.3172 0.5260
1.9 0.2818 0.5812 0.3299 2.1277 1.4482 0.6033
2.0 0.2239 0.5767 0.3528 2.2796 1.5906 0.6889
2.1 0.1666 0.5683 0.3746 2.4463 1.7455 0.7839
2.2 0.1104 0.5560 0.3951 2.6291 1.9141 0.8891
2.3 0.0555 0.5399 0.4139 2.8296 2.0978 1.0054
2.4 0.0025 0.5202 0.4310 3.0493 2.2981 1.1342
2.5 -0.0484 0.4971 0.4461 3.2898 2.5167 1.2765
2.6 -0.0968 0.4708 0.4590 3.5533 2.7554 1.4337
2.7 -0.1424 0.4416 0.4696 3.8417 3.0161 1.6075
2.8 -0.1850 0.4097 0.4777 4.1573 3.3011 1.7994
2.9 -0.2243 0.3754 0.4832 4.5027 3.6126 2.0113
"""

    assert st == expected
